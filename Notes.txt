1. Document Object Modal - DOM: Structured representation of HTMK documents. Allows Javascript to access HTML elements and styles to Manipulate them.

- In js function are the varible which the values

2.Execution context and the call stack
  - Scope Chain 
  types of Scope
  Global ,function,block scope (E6)
difference between scope chain and call stack

3.Variable environment: Hoisting and the TDZ;
- Hoisting: Makes some types of variable accessible/usable in the code before they are actually declared.'Variable lifted to the top of their scope'.
-> Behind the scenes 
Before execution, code is scanned for variable declarations, and for each variable, a new property is created in the variable environment object.

4. this keyword: Special variable that is created for every execution context (every function). Takes the value of (points to ) the 'owner' of the function in which the this keyword is used.

- Method this = object that is calling the method.
- simple function call this = undefined
- Arrow function this = this of surrounding function (lexical this)
- event listener this = DOM element that the handler is attached to.
- new,call,apply,bind ->
this does NOT point to the function itself, and also NOT the this variable environment.


JS Engine => Call Stack and Heap

call stack where all function are executed and heap where all objects are stored or memory.


Big topics that how js works bts
1. Prototype Inheritance : OOP with Javascript
2.Event Loop: Asynchronous Javascript: Promises,Async,Await and AJAX.
3. How the DOM Really Works: Advanced DOM and Events

//Tips on chaining method:
// First we should not overuse chaining, so we should try to optimize it because chaining tons of methods one after the other can cause a real performance issues if we have really huge arrays. So if we have a huge chain of methods, chained one after the other, we should try to compress all the functionality that they do into as little methods as possible. For example, sometimes we create way more map methods then we actually need, where we could just do it all in just one map call.So when you chain methods like this,keep looking for opportunities of keeping up your codes performance. And second, it is a bad practice in JavaScript to chain methods that mutate the underlying original array.And an example of that is the splice method. So again, you should not chain a method like the splice or the reverse method. I mean, you can do that, and for a small application like this one, it's not a big deal and it's not going to cause problems, but in a large scale application, it's usually always a good practice to avoid mutating arrays.



